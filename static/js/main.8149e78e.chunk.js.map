{"version":3,"sources":["components/Wrapper/index.js","components/Navbar/index.js","components/Jumbotron/index.js","components/Container/index.js","components/Footer/index.js","components/Album/index.js","App.js","index.js"],"names":["Wrapper","props","className","children","Navbar","class","title","message","score","highScore","Jumbotron","Container","Footer","text","albumImg","name","image","console","log","src","alt","App","state","albums","clicked","Set","validateClick","id","selectAlbum","find","album","has","setState","shuffleAlbums","add","Math","max","size","i","length","j","floor","random","temp","this","map","Album","onClick","Component","ReactDOM","render","document","getElementById"],"mappings":"8zDAMeA,MAJf,SAAiBC,GACb,OAAO,qBAAKC,UAAU,UAAf,SAA0BD,EAAME,Y,MCS5BC,MATf,SAAgBH,GACZ,OAAO,sBAAKC,UAAU,mBAAf,UAEH,sBAAMG,MAAM,uBAAZ,SAAoCJ,EAAMK,QAC1C,sBAAMD,MAAM,uBAAZ,SAAoCJ,EAAMM,UAC1C,uBAAMF,MAAM,uBAAZ,oBAA2CJ,EAAMO,MAAjD,eAAoEP,EAAMQ,iB,MCKnEC,MAVf,SAAmBT,GACf,OAEI,aADA,CACA,OAAKC,UAAU,4BAAf,SACI,qBAAKA,UAAU,iB,MCCZS,MALf,SAAmBV,GAEf,OAAO,sBAAMC,UAAU,YAAhB,SAA6BD,EAAME,Y,MCO/BS,MATf,SAAgBX,GACZ,OAEI,aADA,CACA,UAAQC,UAAU,kCAAlB,SACKD,EAAMY,Q,cCIJC,MARf,YAA8C,IAA1BC,EAAyB,EAAzBA,KAAMC,EAAmB,EAAnBA,MAAUf,EAAS,gCAEzC,OADAgB,QAAQC,IAAIjB,GAGR,aADA,CACA,+BAAKkB,IAAKH,EAAOI,IAAKL,GAAUd,GAAhC,IAAuCC,UAAU,oB,OCwE1CmB,E,4MAlEXC,MAAQ,CACJC,OAAQA,EACRC,QAAS,IAAIC,IACblB,QAAS,uDACTE,UAAW,G,EAGfiB,cAAgB,SAAAC,GAEZ,IAAMC,EAAc,EAAKN,MAAMC,OAAOM,MAAK,SAAAC,GAAK,OAAIA,EAAMH,KAAOA,KAE7D,EAAKL,MAAME,QAAQO,IAAIH,GAGvB,EAAKI,UAAS,SAAAV,GAAK,kCACZA,GADY,IAEfE,QAAS,IAAIC,IACblB,QAAS,8BAMb,EAAKyB,UAAS,SAAAV,GAAK,kCACZA,GADY,IAEfC,OAAQ,EAAKU,cAAcX,EAAMC,QACjCC,QAASF,EAAME,QAAQU,IAAIN,GAC3BnB,UAAW0B,KAAKC,IAAId,EAAME,QAAQa,KAAMf,EAAMb,WAC9CF,QAAS,4B,EAKrB0B,cAAgB,SAACV,GACb,IAAK,IAAIe,EAAIf,EAAOgB,OAAS,EAAGD,EAAI,EAAGA,IAAK,CACxC,IAAIE,EAAIL,KAAKM,MAAMN,KAAKO,UAAYJ,EAAI,IACpCK,EAAOpB,EAAOe,GAClBf,EAAOe,GAAKf,EAAOiB,GACnBjB,EAAOiB,GAAKG,EAEhB,OAAOpB,G,uDAKD,IAAD,OACL,OACI,eAAC,EAAD,WACI,cAAC,EAAD,CAAQjB,MAAM,0BAA0BC,QAASqC,KAAKtB,MAAMf,QAASC,MAAOoC,KAAKtB,MAAME,QAAQa,KAAM5B,UAAWmC,KAAKtB,MAAMb,YAC3H,cAAC,EAAD,wBACA,cAAC,EAAD,UACKmC,KAAKtB,MAAMC,OAAOsB,KAAI,SAAAf,GAAK,OACxB,cAACgB,EAAD,CAEI/B,KAAMe,EAAMf,KACZC,MAAOc,EAAMd,MACb+B,QAAS,kBAAM,EAAKrB,cAAcI,EAAMH,MAHnCG,EAAMH,SAOvB,cAAC,EAAD,CAAQd,KAAK,mC,GAhEXmC,a,MCJlBC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.8149e78e.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Wrapper(props) {\n    return <div className=\"wrapper\">{props.children}</div>;\n}\n\nexport default Wrapper;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Navbar(props) {\n    return <nav className=\"navbar fixed-top\">\n        {/* Spans that take in props for title, score, and high score based on state */}\n        <span class=\"navbar-brand mb-0 h1\">{props.title}</span>\n        <span class=\"navbar-brand mb-0 h1\">{props.message}</span>\n        <span class=\"navbar-brand mb-0 h1\">Score: {props.score} Top Score: {props.highScore}</span>\n    </nav>;\n}\n\nexport default Navbar;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Jumbotron(props) {\n    return (\n        // Jumbotron with that contains an image background\n        <div className=\"jumbotron jumbotron-fluid\">\n            <div className=\"container\">\n            </div>\n        </div>\n    );\n}\n\nexport default Jumbotron;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Container(props) {\n    // Container to hold all the rendered album images\n    return <main className=\"container\">{props.children}</main>;\n}\n\nexport default Container;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Footer(props) {\n    return (\n        // Sticky footer\n        <footer className=\"footer mt-auto py-3 text-center\">\n            {props.text}\n        </footer>\n    )\n}\n\nexport default Footer;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction albumImg({ name, image, ...props }) {\n    console.log(props)\n    return (\n        // Image rendered for each album\n        <img src={image} alt={name} {...props} className=\"img-thumbnail\"></img>\n    );\n}\n\nexport default albumImg;\n","import React, { Component } from \"react\";\nimport Wrapper from \"./components/Wrapper\";\nimport Navbar from \"./components/Navbar\";\nimport Jumbotron from \"./components/Jumbotron\";\nimport Container from \"./components/Container\";\nimport Footer from \"./components/Footer\";\nimport AlbumImg from \"./components/Album\";\nimport albums from \"./albums.json\";\n\nclass App extends Component {\n    // Setting this.state.albums to the albums json array\n    // this.state.clicked is a set that keeps track of what albums have been clicked\n    // this.state.highScore keeps track of the high score\n    state = {\n        albums: albums,\n        clicked: new Set(),\n        message: \"Test your memory and click images no more than once!\",\n        highScore: 0\n    };\n\n    validateClick = id => {\n        // Finds the album with specific id in this.state.albums\n        const selectAlbum = this.state.albums.find(album => album.id === id);\n        // Set this.state.clicked set includes the selected album, end game since it has been selected before\n        if (this.state.clicked.has(selectAlbum)) {\n            // End game and set this.state to include a new set that is empty to start a new game\n            // Set message to display you guessed incorrect\n            this.setState(state => ({\n                ...state,\n                clicked: new Set(),\n                message: \"You guessed incorrect!\"\n            }))\n        } else {\n            // If this.state.clicked doesn't include the slected album, add the album to the clicked set \n            // Update high score to reflect either the number of correct albums selected or the existing high score, whichever is larger\n            // Set mesage to display you guessed correct\n            this.setState(state => ({\n                ...state,\n                albums: this.shuffleAlbums(state.albums),\n                clicked: state.clicked.add(selectAlbum),\n                highScore: Math.max(state.clicked.size, state.highScore),\n                message: \"You guesed correct!\"\n            }))\n        }\n    };\n\n    shuffleAlbums = (albums) => {\n        for (let i = albums.length - 1; i > 0; i--) {\n            let j = Math.floor(Math.random() * (i + 1));\n            let temp = albums[i];\n            albums[i] = albums[j];\n            albums[j] = temp;\n        }\n        return albums\n    }\n\n    // Render navbar with title, message, score, and high score based this.state\n    // Map over this.state.album and render a album image component for each album object\n    render() {\n        return (\n            <Wrapper>\n                <Navbar title=\"Music Album Memory Game\" message={this.state.message} score={this.state.clicked.size} highScore={this.state.highScore} />\n                <Jumbotron>Jumbotron</Jumbotron>\n                <Container>\n                    {this.state.albums.map(album => (\n                        <AlbumImg\n                            key={album.id}\n                            name={album.name}\n                            image={album.image}\n                            onClick={() => this.validateClick(album.id)}\n                        />\n                    ))}\n                </Container>\n                <Footer text=\"Music Album Memory Game\"></Footer>\n            </Wrapper>\n        );\n    }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));"],"sourceRoot":""}